
#user  nobody;
worker_processes  1;

#
# Uncomment for debugging
#
#error_log   /usr/local/var/log/nginx/error.log  notice;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {

    #
    # In case of "no resolver defined to resolve" error, explicitly provide your comany's nameservers
    # (cat /etc/resolv.conf)
    #
    # resolver 10.0.0.1 10.0.0.2 192.168.8.1;

    #
    # Define internal and external hostnames and base URLs
    #
    map $http_host $internal_ghe_hostname {
        default "private-ghe-hostname.intranet.local";
    }
    map $http_host $internal_ghe_baseurl {
        default "http://$internal_ghe_hostname";
    }
    map $http_host $public_ghe_hostname {
        default "public-ghe-hostname.mycompany.com";
    }
    map $http_host $public_ghe_baseurl {
        default "https://$public_ghe_hostname";
    }

    #
    # Rewrite referer request header
    #
    map $http_referer $new_referer {
        default $http_referer;
        "~^$public_ghe_baseurl(.*)$" "$internal_ghe_baseurl$1";
    }

    # Atlassian IPs: https://github.com/atlassian/github-for-jira/blob/main/docs/ip-allowlist.md
    map $remote_addr $is_atlassian_ip {
        default 0;
        "~^104\.192\.138\.(24[0-9]|25[0-5])$" 1;
        "~^13\.52\.5\.(9[6-9]|1[01][0-9]|12[0-7])$" 1;
    }

    server {
        listen 0.0.0.0:443;
        listen [::]:443;
        server_name localhost;

        #
        # TODO: configure SSL etc
        #

        location / {

            #
            # Rewrite request headers
            #
            proxy_set_header Host $internal_ghe_hostname;
            proxy_set_header Referer $new_referer;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Accept-Encoding "";

            proxy_redirect ~^($internal_ghe_baseurl)(/.*)?$ $public_ghe_baseurl$2;

            #
            # Rewrite response headers
            #
            header_filter_by_lua_block {
                local headers = ngx.resp.get_headers()
                local internal_ghe_baseurl = ngx.var.internal_ghe_baseurl
                local public_ghe_baseurl = ngx.var.public_ghe_baseurl
                local internal_ghe_hostname = ngx.var.internal_ghe_hostname
                local public_ghe_hostname = ngx.var.public_ghe_hostname

                for header_name, header_value in pairs(headers) do
                    if type(header_value) == "table" then
                        for i, value in ipairs(header_value) do
                            header_value[i] = string.gsub(header_value[i], internal_ghe_hostname, public_ghe_hostname)
                        end
                    elseif type(header_value) == "string" then
                        header_value = string.gsub(header_value, internal_ghe_hostname, public_ghe_hostname)
                    end
                    ngx.header[header_name] = header_value
                end
            }

            #
            # Rewrite response content
            #
            sub_filter "$internal_ghe_hostname" "$public_ghe_hostname";
            sub_filter_once off;

            #
            # Whitelist company's internal IPs
            #
            if ($remote_addr ~ "^(192\.168\.0\.)") {
                proxy_pass $internal_ghe_baseurl;
                break;
            }

            #
            # Prohibit calls from non-Atlassian IPs
            #
            if ($is_atlassian_ip = 0) {
                return 401 "Not allowed";
            }

            #
            # Allow calls with API key
            #
            if ($http_x_mysecretheader = "MY_API_KEY") {
                proxy_pass $internal_ghe_baseurl;
                break;
            }

            return 401 "Not allowed";
        }
    }
}
